{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","node","React","useState","input","setInput","output","state","removeLoc","gql","e","Card","elevation","style","maxHeight","CardContent","Typography","TextField","maxRows","autoFocus","fullWidth","margin","multiline","onChange","event","target","value","Divider","overflow","height","collapsed","src","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAsCeA,MA7Bf,WAAgB,IAyByBC,EAzB1B,EACaC,IAAMC,SAAS,cAD5B,mBACNC,EADM,KACCC,EADD,KAETC,EAAiB,GACjBC,EAAe,UACnB,IAqBuCN,EApBIG,EAAzCE,EAqBKE,YAAUC,YAAIR,IApBnBM,EAAQ,QACR,MAAOG,GACPH,EAAQ,UAEV,OAAQ,mCACF,cAACI,EAAA,EAAD,CAAMC,UAAW,EAAGC,MAAO,CAACC,UAAU,SAAtC,SACE,eAACC,EAAA,EAAD,WACG,cAACC,EAAA,EAAD,2CAGD,cAACC,EAAA,EAAD,CAAWC,QAAS,EAAGC,WAAW,EAAMC,WAAS,EAACC,OAAO,SAASC,WAAW,EAAMC,SAAU,SAAAC,GAAK,OAAInB,EAASmB,EAAMC,OAAOC,QAAQA,MAAOtB,EAA3I,SAAoJA,IACpJ,cAACuB,EAAA,EAAD,IACW,UAAVpB,EAAoB,cAAC,IAAD,CAAWM,MAAO,CAACQ,OAAQ,OAAQO,SAAU,SAAUC,OAAQ,QAASC,WAAW,EAAOC,IAAKzB,IAAuB,cAACU,EAAA,EAAD,CAAYgB,MAAO,MAAnB,mCCbxIC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9a9aa51a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Card, CardContent, Divider, TextField, Typography } from '@mui/material';\nimport { gql } from '@apollo/client';\nimport { removeLoc } from '@graphql-tools/optimize';\nimport ReactJson from 'react-json-view'\n\ntype State = 'valid' | 'invalid'\n\nfunction App() {\n  const [input, setInput] = React.useState(\"query {id}\")\n  let output: object = {}\n  let state: State = 'invalid'\n  try {\n    output = formatInputAsAbstructSyntaxTree(input)\n    state = 'valid'\n  } catch (e) {\n    state = 'invalid'\n  }\n  return (<>\n        <Card elevation={5} style={{maxHeight:'100vh'}}>\n          <CardContent>\n             <Typography >\n            Get the Abstract Syntax Tree   \n            </Typography> \n            <TextField maxRows={5} autoFocus={true} fullWidth margin=\"normal\" multiline={true} onChange={event => setInput(event.target.value)} value={input} >{input}</TextField>\n            <Divider />\n            {state === 'valid' ? <ReactJson style={{margin: '10px', overflow: 'scroll', height: '85vh'}} collapsed={false} src={output}></ReactJson> : <Typography color={'red'}>Invalid input</Typography>}\n          </CardContent>\n        </Card>\n  </>\n  );\n}\n\nfunction formatInputAsAbstructSyntaxTree(node: string) {\n  return removeLoc(gql(node))\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}