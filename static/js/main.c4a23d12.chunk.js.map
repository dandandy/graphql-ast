{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["formatInputAsAbstructSyntaxTreeWithHighlightingHover","node","hover","str","JSON","stringify","length","isArray","map","value","valueIsAnObject","join","entries","Object","matchingEntries","filter","valueContainsTarget","key","notMatchingEntries","concat","target","App","output","obj","React","useState","input","setInput","setHover","removeLoc","gql","parse","e","Grid","container","alignItems","spacing","margin","item","Card","Typography","TextField","multiline","onChange","event","split","t","onMouseLeave","onMouseOver","console","log","replaceAll","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2RAqCA,SAASA,EAAqDC,EAAcC,GAC1E,GAYF,SAAiBD,GACf,IAAME,EAAMC,KAAKC,UAAUJ,GAC3B,MAAkB,MAAXE,EAAI,IAAsC,MAAxBA,EAAIA,EAAIG,OAAS,GAdtCC,CAAQN,GACV,MAAO,IAAMA,EAAKO,KAAI,SAAAC,GAAK,OAAIC,EAAgBD,GAAST,EAAqDS,EAAOP,GAArF,UAAiGO,MAASE,KAAK,OAAS,IAEzJ,IAAMC,EAAUC,OAAOD,QAAQX,GACzBa,EAAkBF,EAAQG,QAAO,mBAAeC,EAAf,oBAA0Cd,MAC9EM,KAAI,mCAAES,EAAF,KAAOR,EAAP,uBAAuBQ,EAAvB,aAA+BR,MAChCS,EAAqBN,EAAQG,QAAO,mBAAgBC,EAAhB,oBAA2Cd,MAClFM,KAAI,mCAAES,EAAF,KAAOR,EAAP,qBAAqBQ,EAArB,aAA6BP,EAAgBD,GAAST,EAAqDS,EAAOP,GAArF,UAAiGO,OAErI,MAAO,MAAQK,EAAgBK,OAAOD,GAAoBP,KAAK,OAAS,IAQ1E,SAASD,EAAgBD,GACvB,MAAwB,kBAAVA,EAGhB,SAASO,EAAoBP,EAAYW,GACvC,MAAqB,kBAAVX,GACFA,IAAUW,EASNC,MA9Df,WAAgB,IAGVC,EACAC,EAsDmCtB,EA1D1B,EACauB,IAAMC,SAAS,IAD5B,mBACNC,EADM,KACCC,EADD,OAEaH,IAAMC,SAAS,IAF5B,mBAENvB,EAFM,KAEC0B,EAFD,KAKb,IAqDuC3B,EApDIyB,EAAzCJ,EAqDKlB,KAAKC,UAAUwB,YAAUC,YAAI7B,IAAQ,KAAM,GApDhDsB,EAAMnB,KAAK2B,MAAMT,GACjB,MAAOU,GACPV,EAAS,gBACTC,EAAM,GAER,OAAQ,mCACN,cAACU,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAW,SAASC,QAAS,EAAGC,OAAQ,OAAxD,SACE,cAACJ,EAAA,EAAD,CAAMK,MAAI,EAAV,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,2CACA,cAACC,EAAA,EAAD,CAAWC,WAAW,EAAMC,SAAU,SAAAC,GAAK,OAAIjB,EAASiB,EAAMxB,OAAOX,QAArE,SAA+EiB,IAC/E,cAACc,EAAA,EAAD,UAAad,EAAMmB,MAAM,KAAKrC,KAAI,SAAAsC,GAAC,OAAI,qCAAE,sBAA2BC,aAAc,kBAAInB,EAAS,KAAKoB,YAAa,WAAOC,QAAQC,IAAIJ,EAAEK,WAAW,YAAc,KAAKvB,EAASkB,EAAEK,WAAW,YAAc,MAA/J,SAAwKL,IAAS,6CAC1N,8BAAM,cAACN,EAAA,EAAD,UAAclB,MAEpB,+CAAkBtB,EAAqDuB,EAAKrB,gBCfvEkD,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c4a23d12.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Card, Grid, TextField, Typography } from '@mui/material';\nimport { gql , DocumentNode} from '@apollo/client';\nimport { removeLoc } from '@graphql-tools/optimize';\nimport { ASTNode, visit } from 'graphql';\n\n\nfunction App() {\n  const [input, setInput] = React.useState(\"\")\n  const [hover, setHover] = React.useState(\"\")\n  let output: string\n  let obj: {}\n  try {\n    output = formatInputAsAbstructSyntaxTree(input)\n    obj = JSON.parse(output)\n  } catch (e) {\n    output = \"invalid input\"\n    obj = {}\n  }\n  return (<>\n    <Grid container alignItems=\"center\" spacing={2} margin={'auto'}>\n      <Grid item>\n        <Card>\n          <Typography>Get the Abstract Syntax Tree</Typography>\n          <TextField multiline={true} onChange={event => setInput(event.target.value)} >{input}</TextField>\n          <Typography>{input.split(' ').map(t => <><span /*display=\"inline\"*/ onMouseLeave={()=>setHover(\"\")} onMouseOver={() => {console.log(t.replaceAll(/[{}:+-]/ig , \"\"));setHover(t.replaceAll(/[{}:+-]/ig , \"\"))}} >{t}</span><span /*display=\"inline\"*/> </span></>)}</Typography>\n          <pre ><Typography >{output}</Typography></pre>\n\n          <span>FORMAT AST {formatInputAsAbstructSyntaxTreeWithHighlightingHover(obj, hover)}</span>\n        </Card>\n      </Grid>\n    </Grid>\n  </>\n  );\n}\n\nfunction formatInputAsAbstructSyntaxTreeWithHighlightingHover(node: object, hover: string): string {\n  if (isArray(node)) {\n    return '[' + node.map(value => valueIsAnObject(value) ? formatInputAsAbstructSyntaxTreeWithHighlightingHover(value, hover) : `${value}`).join(',\\n') + ']'\n  }\n  const entries = Object.entries(node)\n  const matchingEntries = entries.filter(([, value]) => valueContainsTarget(value, hover))\n    .map(([key, value]) => `!!${key}: ${value}`)\n  const notMatchingEntries = entries.filter(([, value]) => !valueContainsTarget(value, hover))\n    .map(([key, value]) => `${key}: ${valueIsAnObject(value) ? formatInputAsAbstructSyntaxTreeWithHighlightingHover(value, hover) : `${value}`}`)\n\n  return '{\\n' + matchingEntries.concat(notMatchingEntries).join(',\\n') + '}'\n}\n\nfunction isArray(node: object): node is Array<object> {\n  const str = JSON.stringify(node)\n  return str[0] === '[' && str[str.length - 1] === ']'\n} \n\nfunction valueIsAnObject(value:any): value is object {\n  return typeof value === 'object'\n}\n\nfunction valueContainsTarget(value: any, target: string): boolean {\n  if (typeof value === 'string') {\n    return value === target\n  }\n  return false\n}\n\nfunction formatInputAsAbstructSyntaxTree(node: string): string {\n  return JSON.stringify(removeLoc(gql(node)), null, 2)\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}